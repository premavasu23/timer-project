[{"C:\\Users\\prema\\Documents\\GitHub\\timer-project\\src\\index.js":"1","C:\\Users\\prema\\Documents\\GitHub\\timer-project\\src\\App.js":"2"},{"size":253,"mtime":1696635814093,"results":"3","hashOfConfig":"4"},{"size":2507,"mtime":1696635246439,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"naeygz",{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"C:\\Users\\prema\\Documents\\GitHub\\timer-project\\src\\index.js",[],[],"C:\\Users\\prema\\Documents\\GitHub\\timer-project\\src\\App.js",["14"],[],"import { useEffect, useState } from 'react';\nimport './App.css';\n\nfunction App() {\n\n  const [isCountingDown, setIsCountingDown] = useState(false);\n  const defaultDate = new Date('2023-10-06T00:00:00');\n  const [date, setDate] = useState(defaultDate)\n  const [displayTime, setDisplayTime] = useState('00:00');\n\n\n  const add10Sec = (() => {\n    date.setSeconds(date.getSeconds() + 10);\n    setDate(date)\n    setDisplayTime(String(date.getMinutes()).padStart(2, \"0\") + \":\" + date.getSeconds())\n  })\n\n  const add1Sec = (() => {\n    date.setSeconds(date.getSeconds() + 1);\n    setDate(date)\n    setDisplayTime(String(date.getMinutes()).padStart(2, \"0\") + \":\" + String(date.getSeconds()).padStart(2, \"0\"))\n  })\n\n  const add1Min = (() => {\n    date.setMinutes(date.getMinutes() + 1);\n    setDate(date)\n    setDisplayTime(String(date.getMinutes()).padStart(2, \"0\") + \":\" + String(date.getSeconds()).padStart(2, \"0\"))\n  })\n  \n  const resetTimer = (() => {\n    setDate(defaultDate);\n    setDisplayTime(\"00:00\");\n  })\n\n\n// This useEffect triggers every second and counts down the timer IF we are in a counting down state\n  useEffect(() => {\n    const seconds = setInterval(() => {\n   \n        if(isCountingDown === true){\n          date.setSeconds(date.getSeconds() - 1);\n          setDate(date)\n          setDisplayTime(String(date.getMinutes()).padStart(2, \"0\") + \":\" + String(date.getSeconds()).padStart(2, \"0\"))\n        }\n    \n    }, 1000);\n    return () => clearInterval(seconds);\n  }, [date, isCountingDown]);\n\n  useEffect(() => {\n    if (displayTime === \"00:00\") {\n      setIsCountingDown(false);\n      // TODO: add animation?\n      resetTimer();\n    }\n  }, [displayTime])\n\n\n\n  const updateIfCountingDown = (() => {\n    if (isCountingDown === false) {\n      // ensure we don't count down from 00:00 --> 59:59\n      if(displayTime !== \"00:00\") {\n        setIsCountingDown(true);\n      }\n    } else {\n      setIsCountingDown(false)\n    }\n  })\n\n  return (\n    <div className=\"App\">\n      <p className=\"time-display\">{displayTime}</p>\n\n      <div>\n      <button className=\"major-button\" onClick={updateIfCountingDown}>Start/Stop</button>\n      <button className=\"major-button\" onClick={resetTimer}>Reset</button>\n      </div>\n\n      <div>\n      <button className=\"minor-button\" onClick={add1Min}>+ 1 min</button>\n      <button className=\"minor-button\" onClick={add1Sec}>+ 1 sec</button>\n      <button className=\"minor-button\" onClick={add10Sec}>+ 10 sec</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n",["15"],{"ruleId":"16","severity":1,"message":"17","line":56,"column":6,"nodeType":"18","endLine":56,"endColumn":19,"suggestions":"19"},{"ruleId":"20","replacedBy":"21"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'resetTimer'. Either include it or remove the dependency array.","ArrayExpression",["22"],"no-new-object",["23"],{"desc":"24","fix":"25"},"no-object-constructor","Update the dependencies array to be: [displayTime, resetTimer]",{"range":"26","text":"27"},[1654,1667],"[displayTime, resetTimer]"]